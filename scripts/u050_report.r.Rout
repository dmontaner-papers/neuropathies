
R version 2.12.1 (2010-12-16)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##u050_report.r
> ##2011-03-14 dmontaner@cipf.es
> ##2011-05-03 dmontaner@cipf.es
> ##analisis de datos para Carmen Espinos y Eduardo Calpena.
> ##Hacemos reports de las regiones significativas del Merlin
> 
> date ()
[1] "Tue May  3 13:47:02 2011"
> Sys.info ()[c("nodename", "user")]
     nodename          user 
"davidlaptop"   "dmontaner" 
> commandArgs ()
[1] "/usr/lib64/R/bin/exec/R" "-f"                     
[3] "u050_report.r"           "--restore"              
[5] "--save"                  "--no-readline"          
[7] "--no-save"               "--no-restore"           
> rm (list = ls ())
> R.version.string #"R version 2.12.1 (2010-12-16)"
[1] "R version 2.12.1 (2010-12-16)"
> #library (kinship); packageDescription ("kinship", fields = "Version") #"1.1.0-23"
> 
> try (source (".job.r")); try (.job)

.job.r has been sourced

$owner
[1] "eduardo_calpena"

$datadir
[1] "~/datos/2011/eduardo_calpena"

$docsdir
[1] "~/trabajos/2011/eduardo_calpena"

$scriptdir
[1] "~/trabajos/2011/eduardo_calpena/scripts"

$sinfodir
[1] "~/trabajos/2011/eduardo_calpena/sampleinfo"

$plotsdir
[1] "~/datos/2011/eduardo_calpena/data_results/from_script_plots"

$testmode
[1] FALSE

$dec
[1] "."

> 
> ###DATOS
> load (file = file.path (.job$datadir, "data_processed", "res_merlin0.RData"))
> load (file = file.path (.job$datadir, "data_processed", "res_merlin1.RData"))
> load (file = file.path (.job$datadir, "data_processed", "res_merlin2.RData"))
> load (file = file.path (.job$datadir, "data_processed", "res_merlin3.RData"))
> ls ()
[1] "cromosomas" "resm0"      "resm1"      "resm2"      "resm3"     
> 
> ## ################################################################################
> ## for (corte in c(0, 2)) {
> ##   for (cro in cromosomas) {
> ##     cat ("\n")
> ##     print (cro)
>     
> ##     ##detectamos runs
> ##     signf <- resm0[[cro]][,"LOD"] > corte       #significative
> ##     prece <- c (FALSE, signf[-length (signf)])  #preceding
> ##     start <- signf & !prece                     #starting poin
> ##     cumul <- cumsum (start)                     #cumulative distribution
> ##     myrun <- cumul * signf                      #run of significative snps 
>     
> ##     runs <- setdiff (unique (myrun), 0)
>     
> ##     ##report
> ##     repfile <- file.path (.job$datadir, "data_results", "from_script_results", paste ("merlin0_lor", corte, "_cromosoma_", cro, ".txt", sep = ""))
>     
> ##     cat (paste ("########## Regiones seleccionadas cromosoma", cro, "##########"),
> ##          file = repfile, append = FALSE, fill = TRUE)
>     
> ##     for (run in runs) {
> ##       print (run)
> ##       ##
> ##       cat (paste ("##### Region:", run, "#####"),
> ##            file = repfile,
> ##            append = TRUE, fill = TRUE)
> ##       ##
> ##       write.table (resm0[[cro]][myrun == run, c("snp", "deCODE.genetic.map", "PhysicalPosition", "LOD", "ALPHA", "HLOD")],
> ##                    file = repfile,
> ##                    append = TRUE, quote = FALSE, sep = "\t",
> ##                    row.names = FALSE, col.names = TRUE)
> ##     }
> ##   }
> ## }
> ## ################################################################################
> 
> ###merlin0
> for (corte in c(0, 2)) {
+   
+   repfile <- file.path (.job$datadir, "data_results", "from_script_results", paste ("merlin0_lor", corte, ".txt", sep = ""))
+   
+   cat (paste ("########## Regiones seleccionadas con LOR:", corte, "##########"),
+        file = repfile, append = TRUE, fill = TRUE)
+   
+   for (cro in cromosomas) {
+     cat ("\n")
+     print (cro)
+     
+     ##detectamos runs
+     signf <- resm0[[cro]][,"LOD"] > corte       #significative
+     prece <- c (FALSE, signf[-length (signf)])  #preceding
+     start <- signf & !prece                     #starting poin
+     cumul <- cumsum (start)                     #cumulative distribution
+     myrun <- cumul * signf                      #run of significative snps 
+     
+     runs <- setdiff (unique (myrun), 0)
+     
+     ##report
+     cat (paste ("########## Regiones seleccionadas cromosoma", cro, "##########"),
+          file = repfile, append = TRUE, fill = TRUE)
+     
+     for (run in runs) {
+       print (run)
+       ##
+       cat (paste ("##### Region:", run, "#####"),
+            file = repfile,
+            append = TRUE, fill = TRUE)
+       ##
+       write.table (resm0[[cro]][myrun == run, c("snp", "deCODE.genetic.map", "PhysicalPosition", "LOD", "ALPHA", "HLOD")],
+                    file = repfile,
+                    append = TRUE, quote = FALSE, sep = "\t",
+                    row.names = FALSE, col.names = TRUE)
+     }
+   }
+ }

[1] "1"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "10"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5

[1] "11"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "12"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "13"
[1] 1
[1] 2

[1] "14"

[1] "15"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "16"
[1] 1

[1] "17"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10

[1] "18"

[1] "19"

[1] "2"
[1] 1
[1] 2

[1] "20"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6

[1] "21"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5

[1] "22"
[1] 1

[1] "3"
[1] 1

[1] "4"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5

[1] "5"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5

[1] "6"
[1] 1
[1] 2
[1] 3

[1] "7"

[1] "8"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11

[1] "9"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13

[1] "X"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "1"

[1] "10"
[1] 1
[1] 2

[1] "11"

[1] "12"

[1] "13"

[1] "14"

[1] "15"

[1] "16"

[1] "17"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "18"

[1] "19"

[1] "2"

[1] "20"
[1] 1
[1] 2
[1] 3

[1] "21"

[1] "22"

[1] "3"

[1] "4"
[1] 1
[1] 2

[1] "5"
[1] 1
[1] 2
[1] 3

[1] "6"
[1] 1

[1] "7"

[1] "8"
[1] 1

[1] "9"
[1] 1
[1] 2

[1] "X"
There were 50 or more warnings (use warnings() to see the first 50)
> ################################################################################
> 
> ###merlin1
> for (corte in c(0, 2)) {
+   
+   repfile <- file.path (.job$datadir, "data_results", "from_script_results", paste ("merlin1_lor", corte, ".txt", sep = ""))
+   
+   cat (paste ("########## Regiones seleccionadas con LOR:", corte, "##########"),
+        file = repfile, append = TRUE, fill = TRUE)
+   
+   for (cro in cromosomas) {
+     cat ("\n")
+     print (cro)
+     
+     ##detectamos runs
+     signf <- resm1[[cro]][,"LOD"] > corte       #significative
+     prece <- c (FALSE, signf[-length (signf)])  #preceding
+     start <- signf & !prece                     #starting poin
+     cumul <- cumsum (start)                     #cumulative distribution
+     myrun <- cumul * signf                      #run of significative snps 
+     
+     runs <- setdiff (unique (myrun), 0)
+     
+     ##report
+     cat (paste ("########## Regiones seleccionadas cromosoma", cro, "##########"),
+          file = repfile, append = TRUE, fill = TRUE)
+     
+     for (run in runs) {
+       print (run)
+       ##
+       cat (paste ("##### Region:", run, "#####"),
+            file = repfile,
+            append = TRUE, fill = TRUE)
+       ##
+       write.table (resm1[[cro]][myrun == run, c("snp", "deCODE.genetic.map", "PhysicalPosition", "LOD", "ALPHA", "HLOD")],
+                    file = repfile,
+                    append = TRUE, quote = FALSE, sep = "\t",
+                    row.names = FALSE, col.names = TRUE)
+     }
+   }
+ }

[1] "1"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "10"
[1] 1

[1] "11"
[1] 1
[1] 2

[1] "12"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6

[1] "13"

[1] "14"

[1] "15"
[1] 1
[1] 2

[1] "16"

[1] "17"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9

[1] "18"

[1] "19"

[1] "2"
[1] 1

[1] "20"
[1] 1
[1] 2
[1] 3

[1] "21"
[1] 1

[1] "22"

[1] "3"

[1] "4"
[1] 1

[1] "5"
[1] 1

[1] "6"
[1] 1
[1] 2

[1] "7"

[1] "8"
[1] 1
[1] 2
[1] 3

[1] "9"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "X"
[1] 1
[1] 2

[1] "1"
[1] 1
[1] 2

[1] "10"
[1] 1

[1] "11"

[1] "12"

[1] "13"

[1] "14"

[1] "15"

[1] "16"

[1] "17"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6

[1] "18"

[1] "19"

[1] "2"

[1] "20"

[1] "21"
[1] 1

[1] "22"

[1] "3"

[1] "4"

[1] "5"

[1] "6"

[1] "7"

[1] "8"

[1] "9"
[1] 1

[1] "X"
There were 50 or more warnings (use warnings() to see the first 50)
> ################################################################################
> 
> ###merlin2
> for (corte in c(0, 2)) {
+   
+   repfile <- file.path (.job$datadir, "data_results", "from_script_results", paste ("merlin2_lor", corte, ".txt", sep = ""))
+   
+   cat (paste ("########## Regiones seleccionadas con LOR:", corte, "##########"),
+        file = repfile, append = TRUE, fill = TRUE)
+   
+   for (cro in cromosomas) {
+     cat ("\n")
+     print (cro)
+     
+     ##detectamos runs
+     signf <- resm2[[cro]][,"LOD"] > corte       #significative
+     prece <- c (FALSE, signf[-length (signf)])  #preceding
+     start <- signf & !prece                     #starting poin
+     cumul <- cumsum (start)                     #cumulative distribution
+     myrun <- cumul * signf                      #run of significative snps 
+     
+     runs <- setdiff (unique (myrun), 0)
+     
+     ##report
+     cat (paste ("########## Regiones seleccionadas cromosoma", cro, "##########"),
+          file = repfile, append = TRUE, fill = TRUE)
+     
+     for (run in runs) {
+       print (run)
+       ##
+       cat (paste ("##### Region:", run, "#####"),
+            file = repfile,
+            append = TRUE, fill = TRUE)
+       ##
+       write.table (resm2[[cro]][myrun == run, c("snp", "deCODE.genetic.map", "PhysicalPosition", "LOD", "ALPHA", "HLOD")],
+                    file = repfile,
+                    append = TRUE, quote = FALSE, sep = "\t",
+                    row.names = FALSE, col.names = TRUE)
+     }
+   }
+ }

[1] "1"

[1] "10"
[1] 1
[1] 2

[1] "11"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "12"

[1] "13"
[1] 1

[1] "14"

[1] "15"
[1] 1
[1] 2

[1] "16"

[1] "17"
[1] 1
[1] 2

[1] "18"

[1] "19"

[1] "2"
[1] 1
[1] 2

[1] "20"
[1] 1
[1] 2
[1] 3

[1] "21"
[1] 1
[1] 2
[1] 3

[1] "22"
[1] 1

[1] "3"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "4"
[1] 1
[1] 2
[1] 3

[1] "5"
[1] 1
[1] 2
[1] 3

[1] "6"
[1] 1
[1] 2
[1] 3

[1] "7"

[1] "8"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6

[1] "9"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10

[1] "X"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5

[1] "1"

[1] "10"
[1] 1

[1] "11"
[1] 1

[1] "12"

[1] "13"

[1] "14"

[1] "15"

[1] "16"

[1] "17"

[1] "18"

[1] "19"

[1] "2"

[1] "20"
[1] 1
[1] 2
[1] 3

[1] "21"
[1] 1

[1] "22"

[1] "3"

[1] "4"
[1] 1

[1] "5"
[1] 1
[1] 2
[1] 3

[1] "6"
[1] 1

[1] "7"

[1] "8"
[1] 1
[1] 2
[1] 3

[1] "9"
[1] 1

[1] "X"
There were 50 or more warnings (use warnings() to see the first 50)
> ################################################################################
> 
> ###merlin3
> for (corte in c(0, 2)) {
+   
+   repfile <- file.path (.job$datadir, "data_results", "from_script_results", paste ("merlin3_lor", corte, ".txt", sep = ""))
+   
+   cat (paste ("########## Regiones seleccionadas con LOR:", corte, "##########"),
+        file = repfile, append = TRUE, fill = TRUE)
+   
+   for (cro in cromosomas) {
+     cat ("\n")
+     print (cro)
+     
+     ##detectamos runs
+     signf <- resm3[[cro]][,"LOD"] > corte       #significative
+     prece <- c (FALSE, signf[-length (signf)])  #preceding
+     start <- signf & !prece                     #starting poin
+     cumul <- cumsum (start)                     #cumulative distribution
+     myrun <- cumul * signf                      #run of significative snps 
+     
+     runs <- setdiff (unique (myrun), 0)
+     
+     ##report
+     cat (paste ("########## Regiones seleccionadas cromosoma", cro, "##########"),
+          file = repfile, append = TRUE, fill = TRUE)
+     
+     for (run in runs) {
+       print (run)
+       ##
+       cat (paste ("##### Region:", run, "#####"),
+            file = repfile,
+            append = TRUE, fill = TRUE)
+       ##
+       write.table (resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map", "PhysicalPosition", "LOD", "ALPHA", "HLOD")],
+                    file = repfile,
+                    append = TRUE, quote = FALSE, sep = "\t",
+                    row.names = FALSE, col.names = TRUE)
+     }
+   }
+ }

[1] "1"
[1] 1

[1] "10"
[1] 1
[1] 2
[1] 3

[1] "11"
[1] 1
[1] 2
[1] 3

[1] "12"

[1] "13"
[1] 1
[1] 2

[1] "14"
[1] 1

[1] "15"
[1] 1
[1] 2
[1] 3

[1] "16"
[1] 1
[1] 2

[1] "17"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6

[1] "18"

[1] "19"

[1] "2"
[1] 1

[1] "20"
[1] 1
[1] 2
[1] 3

[1] "21"
[1] 1
[1] 2

[1] "22"

[1] "3"

[1] "4"
[1] 1
[1] 2

[1] "5"
[1] 1
[1] 2
[1] 3

[1] "6"
[1] 1
[1] 2
[1] 3

[1] "7"

[1] "8"

[1] "9"
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10

[1] "X"
[1] 1

[1] "1"

[1] "10"

[1] "11"
[1] 1

[1] "12"

[1] "13"

[1] "14"

[1] "15"

[1] "16"

[1] "17"
[1] 1
[1] 2
[1] 3

[1] "18"

[1] "19"

[1] "2"

[1] "20"
[1] 1

[1] "21"

[1] "22"

[1] "3"

[1] "4"
[1] 1

[1] "5"
[1] 1
[1] 2

[1] "6"

[1] "7"

[1] "8"

[1] "9"
[1] 1
[1] 2
[1] 3
[1] 4

[1] "X"
There were 50 or more warnings (use warnings() to see the first 50)
> ################################################################################
> 
> ###EXIT
> warnings ()
Warning messages:
1: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
2: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
3: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
4: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
5: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
6: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
7: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
8: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
9: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
10: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
11: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
12: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
13: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
14: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
15: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
16: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
17: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
18: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
19: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
20: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
21: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
22: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
23: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
24: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
25: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
26: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
27: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
28: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
29: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
30: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
31: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
32: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
33: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
34: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
35: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
36: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
37: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
38: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
39: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
40: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
41: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
42: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
43: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
44: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
45: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
46: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
47: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
48: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
49: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
50: In write.table(resm3[[cro]][myrun == run, c("snp", "deCODE.genetic.map",  ... :
  appending column names to file
> sessionInfo ()
R version 2.12.1 (2010-12-16)
Platform: x86_64-pc-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=C              LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     
> q ("no")
> proc.time()
   user  system elapsed 
   1.86    0.05    2.03 
